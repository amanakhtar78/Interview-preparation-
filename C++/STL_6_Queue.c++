#include <bits/stdc++.h>
using namespace std;

// ðŸŽ¯ LEARNING NOTES for queue (C++ STL)
// --------------------------------------
// âœ… queue<T>           â†’ container adaptor (default uses deque underneath)
// âœ… push(x)            â†’ insert element at back
// âœ… emplace(x)         â†’ faster insert at back
// âœ… pop()              â†’ remove element from front
// âœ… front()            â†’ access first element
// âœ… back()             â†’ access last element
// âœ… size()             â†’ number of elements
// âœ… empty()            â†’ check if queue is empty
// âœ… swap(q1,q2)        â†’ swap contents of two queues
//
// âš¡ Properties:
// - FIFO (First In First Out)
// - Only front() and back() accessible
// - No iterators (cannot directly traverse)

void basicOfQueue() {
    queue<int> q;

    // ðŸ‘‰ Push / Emplace
    q.push(10);     // {10}
    q.push(20);     // {10,20}
    q.emplace(30);  // {10,20,30}

    cout << "Front: " << q.front() << ", Back: " << q.back() << endl;
    // OUTPUT: Front: 10, Back: 30

    // ðŸ‘‰ Pop
    q.pop();  // removes 10 â†’ {20,30}
    cout << "After pop, Front: " << q.front() << endl;
    // OUTPUT: After pop, Front: 20

    // ðŸ‘‰ Size & empty
    cout << "Size: " << q.size() << endl;
    cout << "Empty: " << q.empty() << endl;
    // OUTPUT:
    // Size: 2
    // Empty: 0

    // ðŸ‘‰ Swap
    queue<int> q2;
    q2.push(100);
    q2.push(200);

    q.swap(q2);

    cout << "After swap, Front of q: " << q.front() << endl;
    cout << "After swap, Front of q2: " << q2.front() << endl;
    // OUTPUT:
    // After swap, Front of q: 100
    // After swap, Front of q2: 20

    // ðŸ‘‰ Printing all elements (need loop, no iterators!)
    cout << "Elements of q: ";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;
    // OUTPUT: Elements of q: 100 200
}

int main() {
    basicOfQueue();
    return 0;
}
