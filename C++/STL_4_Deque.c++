#include <bits/stdc++.h>
using namespace std;

// ðŸŽ¯ LEARNING NOTES for deque (C++ STL)
// --------------------------------------
// âœ… push_back(x)     â†’ insert element at back
// âœ… push_front(x)    â†’ insert element at front
// âœ… emplace_back(x)  â†’ faster insert at back
// âœ… emplace_front(x) â†’ faster insert at front
// âœ… pop_back()       â†’ remove last element
// âœ… pop_front()      â†’ remove first element
// âœ… operator[] / at(i) â†’ random access (like vector)
// âœ… front() / back() â†’ access first & last element
// âœ… insert(pos,x)    â†’ insert before given position
// âœ… erase(pos)       â†’ erase element at position
// âœ… erase(start,end) â†’ erase range
// âœ… size()           â†’ number of elements
// âœ… clear()          â†’ delete all elements
// âœ… empty()          â†’ check if deque is empty
// âœ… swap(d1,d2)      â†’ swap two deques


void basicOfDeque() {
    // ðŸ‘‰ Basic insertions
    deque<int> dq;
    dq.push_back(10);     // {10}
    dq.push_front(20);    // {20,10}
    dq.emplace_back(30);  // {20,10,30}
    dq.emplace_front(40); // {40,20,10,30}

    cout << "Deque after basic insertions: ";
    for (auto x : dq) cout << x << " ";
    cout << endl;
    // OUTPUT: 40 20 10 30 

    // ðŸ‘‰ Random access
    cout << "Element at index 2: " << dq[2] << endl;
    // OUTPUT: Element at index 2: 10

    cout << "Element at index 1 using at(): " << dq.at(1) << endl;
    // OUTPUT: Element at index 1 using at(): 20

    // ðŸ‘‰ Front & Back
    cout << "Front: " << dq.front() << ", Back: " << dq.back() << endl;
    // OUTPUT: Front: 40, Back: 30

    // ðŸ‘‰ Pop operations
    dq.pop_back();   // {40,20,10}
    dq.pop_front();  // {20,10}

    cout << "After pops: ";
    for (auto x : dq) cout << x << " ";
    cout << endl;
    // OUTPUT: 20 10 

    // ðŸ‘‰ Insert
    auto it = dq.begin();
    advance(it, 1);   // move iterator to 2nd element
    dq.insert(it, 99); // {20,99,10}

    cout << "After insert: ";
    for (auto x : dq) cout << x << " ";
    cout << endl;
    // OUTPUT: 20 99 10 

    // ðŸ‘‰ Erase single element
    dq.erase(dq.begin()); // remove first element â†’ {99,10}
    cout << "After erase first: ";
    for (auto x : dq) cout << x << " ";
    cout << endl;
    // OUTPUT: 99 10 

    // ðŸ‘‰ Erase range
    dq.push_back(50); // {99,10,50}
    dq.push_back(60); // {99,10,50,60}
    dq.erase(dq.begin() + 1, dq.begin() + 3); // remove {10,50} â†’ {99,60}

    cout << "After erase range: ";
    for (auto x : dq) cout << x << " ";
    cout << endl;
    // OUTPUT: 99 60 

    // ðŸ‘‰ Size & empty
    cout << "Size: " << dq.size() << ", Empty: " << dq.empty() << endl;
    // OUTPUT: Size: 2, Empty: 0

    // ðŸ‘‰ Swap
    deque<int> dq2 = {1,2,3};
    dq.swap(dq2);
    cout << "After swap dq: ";
    for (auto x : dq) cout << x << " ";
    cout << endl;
    // OUTPUT: 1 2 3

    cout << "After swap dq2: ";
    for (auto x : dq2) cout << x << " ";
    cout << endl;
    // OUTPUT: 99 60 

    // ðŸ‘‰ Clear
    dq.clear(); // remove all
    cout << "After clear, Empty: " << dq.empty() << endl;
    // OUTPUT: After clear, Empty: 1
}

int main() {
    basicOfDeque();
    return 0;
}
