#include <bits/stdc++.h>
using namespace std;

// ðŸŽ¯ LEARNING NOTES for map (C++ STL)
// --------------------------------------
// âœ… map<Key,Value>       â†’ stores key-value pairs, keys are unique
// âœ… insert({k,v})        â†’ insert key-value
// âœ… emplace(k,v)         â†’ faster insert
// âœ… m[key] = v           â†’ insert/update value for key
// âœ… erase(key)           â†’ erase by key
// âœ… erase(it)            â†’ erase by iterator
// âœ… erase(start,end)     â†’ erase range
// âœ… find(key)            â†’ returns iterator to key OR end()
// âœ… count(key)           â†’ 1 if key exists, else 0
// âœ… size(), empty(), clear()
// âœ… lower_bound(key)     â†’ >= key
// âœ… upper_bound(key)     â†’ > key
//
// âš¡ Properties:
// - Keys are UNIQUE
// - Sorted by key (by default ascending order, uses Red-Black Tree)
// - All operations: O(log n)

void basicOfMap() {
    map<int, string> m;

    // ðŸ‘‰ Insert
    m.insert({1, "one"});
    m.emplace(2, "two");
    m[3] = "three";    // insert like array
    m[2] = "TWO";      // update value for existing key

    cout << "Map elements (sorted by key):" << endl;
    for (auto &p : m) {
        cout << p.first << " -> " << p.second << endl;
    }
    // OUTPUT:
    // 1 -> one
    // 2 -> TWO
    // 3 -> three

    // ðŸ‘‰ Find
    auto it = m.find(2);
    if (it != m.end()) cout << "Found key 2 with value: " << it->second << endl;
    // OUTPUT: Found key 2 with value: TWO

    // ðŸ‘‰ Count
    cout << "Count(3): " << m.count(3) << endl; // 1
    cout << "Count(5): " << m.count(5) << endl; // 0

    // ðŸ‘‰ Erase by key
    m.erase(1); // removes key=1
    cout << "After erase(1):" << endl;
    for (auto &p : m) cout << p.first << " -> " << p.second << endl;
    // OUTPUT:
    // 2 -> TWO
    // 3 -> three

    // ðŸ‘‰ Lower & Upper bound
    m[5] = "five"; // {2,TWO}, {3,three}, {5,five}
    cout << "Lower bound of 3: " << m.lower_bound(3)->first << endl; // 3
    cout << "Upper bound of 3: " << m.upper_bound(3)->first << endl; // 5

    // ðŸ‘‰ Size & Empty
    cout << "Size: " << m.size() << endl;
    cout << "Empty: " << m.empty() << endl;
    // OUTPUT:
    // Size: 3
    // Empty: 0

    // ðŸ‘‰ Clear
    m.clear();
    cout << "After clear, Empty: " << m.empty() << endl;
    // OUTPUT: 1
}

int main() {
    basicOfMap();
    return 0;
}
